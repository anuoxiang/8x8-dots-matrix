#include "LedControl.h"

LedControl lc = LedControl(12, 10, 11, 1);
uint8_t chars[] = {
  0x00, 0x00, 0x00, 0x80                //32：空格
  , 0x7a, 0x80                          //33:!
  , 0x60, 0x0, 0x60, 0x80               //34:"
  , 0x14, 0x3e, 0x14, 0x3e, 0x14, 0x80  //35:#
  , 0x12, 0x2a, 0x7f, 0x2a, 0x24, 0x80  //36:$
  , 0x32, 0x34, 0x8, 0x16, 0x26, 0x80   //37:%
  , 0x14, 0x2a, 0x14, 0x2, 0x80         //38:&
  , 0x60, 0x80                          //39:'
  , 0x3c, 0x42, 0x80                    //40:(
  , 0x42, 0x3c, 0x80                    //41:)
  , 0x2a, 0x1c, 0x3e, 0x1c, 0x2a, 0x80  //42:*
  , 0x8, 0x8, 0x3e, 0x8, 0x8, 0x80      //43:+
  , 0x1, 0x6, 0x4, 0x80                 //44:,
  , 0x8, 0x8, 0x8, 0x8, 0x8, 0x80       //45:-
  , 0x6, 0x6, 0x80                      //46:.
  , 0x6, 0x8, 0x10, 0x60, 0x80          //47:/
  , 0x3e, 0x41, 0x41, 0x3e, 0x80        //48:0
  , 0x21, 0x7f, 0x1, 0x80               //49:1
  , 0x47, 0x49, 0x49, 0x31, 0x80        //50:2
  , 0x49, 0x49, 0x49, 0x36, 0x80        //51:3
  , 0x70, 0x8, 0x8, 0x7f, 0x80          //52:4
  , 0x79, 0x49, 0x49, 0x46, 0x80        //53:5
  , 0x3e, 0x49, 0x49, 0x6, 0x80         //54:6
  , 0x40, 0x43, 0x4c, 0x70, 0x80        //55:7
  , 0x36, 0x49, 0x49, 0x36, 0x80        //56:8
  , 0x30, 0x49, 0x49, 0x3e, 0x80        //57:9
  , 0xa, 0x80                           //58::
  , 0x1, 0x1a, 0x80                     //59:;
  , 0x8, 0x14, 0x22, 0x80               //60:<
  , 0x14, 0x14, 0x14, 0x80              //61:=
  , 0x22, 0x14, 0x8, 0x80               //62:>
  , 0x20, 0x4a, 0x30, 0x80              //63:?
  , 0x3c, 0x42, 0x5a, 0x38, 0x80        //64:@
  , 0x3e, 0x48, 0x48, 0x3e, 0x80        //65:A
  , 0x7e, 0x52, 0x52, 0x2c, 0x80        //66:B
  , 0x3c, 0x42, 0x42, 0x24, 0x80        //67:C
  , 0x7e, 0x42, 0x42, 0x3c, 0x80        //68:D
  , 0x7e, 0x52, 0x52, 0x42, 0x80        //69:E
  , 0x7e, 0x50, 0x50, 0x40, 0x80        //70:F
  , 0x3c, 0x42, 0x4a, 0x2e, 0x80        //71:G
  , 0x7e, 0x10, 0x10, 0x7e, 0x80        //72:H
  , 0x42, 0x7e, 0x42, 0x80              //73:I
  , 0x4, 0x2, 0x2, 0x7c, 0x80           //74:J
  , 0x7e, 0x18, 0x24, 0x42, 0x80        //75:K
  , 0x7e, 0x2, 0x2, 0x2, 0x80           //76:L
  , 0x7e, 0x20, 0x10, 0x20, 0x7e, 0x80  //77:M
  , 0x7e, 0x30, 0xc, 0x7e, 0x80         //78:N
  , 0x3c, 0x42, 0x42, 0x3c, 0x80        //79:O
  , 0x7e, 0x48, 0x48, 0x30, 0x80        //80:P
  , 0x3c, 0x46, 0x42, 0x3d, 0x80        //81:Q
  , 0x7e, 0x48, 0x4c, 0x32, 0x80        //82:R
  , 0x24, 0x52, 0x4a, 0x24, 0x80        //83:S
  , 0x40, 0x40, 0x7e, 0x40, 0x40, 0x80  //84:T
  , 0x7c, 0x2, 0x2, 0x7c, 0x80          //85:U
  , 0x78, 0x6, 0x6, 0x78, 0x80          //86:V
  , 0x3e, 0x4, 0x8, 0x4, 0x3e, 0x80     //87: W
  , 0x22, 0x14, 0x8, 0x14, 0x22, 0x80   //88:X
  , 0x40, 0x20, 0x1e, 0x20, 0x40, 0x80  //89:Y
  , 0x42, 0x46, 0x4a, 0x52, 0x62, 0x80  //90:Z
  , 0x7e, 0x42, 0x80                    //91:[
  , 0x60, 0x10, 0x8, 0x6, 0x80          //92:\
  , 0x42, 0x7e, 0x80                    //93:]
  , 0x20, 0x40, 0x20, 0x80              //94:^
  , 0x2, 0x2, 0x2, 0x80                 //95:_
  , 0x40, 0x20, 0x80                    //96:`
  , 0xc, 0x12, 0x14, 0x1e, 0x80         //97:a
  , 0x7c, 0x12, 0x12, 0xc, 0x80         //98:b
  , 0xc, 0x12, 0x12, 0x80               //99:c
  , 0xc, 0x12, 0x12, 0x7e, 0x80         //100:d
  , 0xc, 0x1a, 0x1a, 0x8, 0x80          //101:e
  , 0x8, 0x1f, 0x28, 0x80               //102:f
  , 0xa, 0x15, 0x15, 0x19, 0x80         //103:g
  , 0x3e, 0x8, 0x6, 0x80                //104:h
  , 0x12, 0x5e, 0x2, 0x80               //105:i
  , 0x2, 0x1, 0x5e, 0x80                //106:j
  , 0x7e, 0x8, 0x14, 0x2, 0x80          //107:k
  , 0x42, 0x7e, 0x2, 0x80               //108:l
  , 0x1e, 0x10, 0xc, 0x10, 0x1e, 0x80   //109:m
  , 0x1e, 0x10, 0x10, 0xe, 0x80         //110:n
  , 0xc, 0x12, 0x12, 0xc, 0x80          //111:o
  , 0xf, 0x12, 0x12, 0xc, 0x80          //112:p
  , 0xc, 0x12, 0x12, 0xf, 0x80          //113:q
  , 0x1e, 0x10, 0x8, 0x80               //114:r
  , 0x1a, 0x2a, 0x2c, 0x80              //115:s
  , 0x10, 0x3c, 0x12, 0x12, 0x80        //116:t
  , 0x1c, 0x2, 0x2, 0x1e, 0x80          //117:u
  , 0x1c, 0x2, 0x1c, 0x80               //118:v
  , 0x1c, 0x2, 0x4, 0x2, 0x1c, 0x80     //119:w
  , 0x12, 0xc, 0xc, 0x12, 0x80          //120:x
  , 0x10, 0x9, 0x6, 0x1c, 0x80          //121:y
  , 0x12, 0x16, 0x1a, 0x12, 0x80        //122:z
  , 0x8, 0x36, 0x41, 0x80               //123:{
  , 0x7e, 0x80                          //124:|
  , 0x41, 0x36, 0x8, 0x80               //125:}
  , 0x20, 0x40, 0x20, 0x40, 0x80        //126:~
};

char str[]  = "Hello world! Django.";

uint16_t getChar(char m) {
  uint16_t i = 0;
  for (uint8_t a = m - 32; a > 0; a--) {
    if (i >= sizeof(chars) / sizeof(chars[0])) break;
    do
      i++;
    while (chars[i] != 0x80);
    i++;
  }
  return i;
}

byte disp[8] = {0xf0, 0xc0, 0xa0, 0x10, 0x0, 0x0, 0x0, 0x0};
void setup() {
  lc.shutdown(0, false);
  lc.setIntensity(0, 8);
  lc.clearDisplay(0);
  Serial.begin(9600);
  Serial.println(str);
  Serial.println(sizeof(str) / sizeof(str[0]));
}

const byte delaytime = 150;

/* char pointer.
   point to which char is displaying.
*/
byte c_pointer = 0;

/* char position pointer
   when led is scrolling, it will be descending from 7 to 0
   but when 7-c_p_pointer > length of char then c_pointer++
*/
uint16_t c_p_pointer = 0;//char position pointer

bool IsBlank() {
  bool f = true;
  for (byte i = 0; i < 8; i++)
    if (disp[i] != 0) {
      f = false;
      break;
    }
  return f;
}

void loop() {
  if (chars[getChar(str[c_pointer]) + c_p_pointer] == 0x80) {
    if (c_pointer + 1 == (sizeof(str) / sizeof(str[0])))
    {
      if (IsBlank()) {
        Serial.println("");
        c_pointer = 0;
        c_p_pointer = 0;
      }
    }
    else {
      Serial.print(getChar(str[c_pointer]));
      Serial.print(" ");
      c_p_pointer = 0;
      c_pointer++;
    }
  }
  else {
    //Serial.print("run here 2.");
    disp[0] += (chars[getChar(str[c_pointer]) + c_p_pointer] & 0x80 ? 1 : 0);
    disp[1] += (chars[getChar(str[c_pointer]) + c_p_pointer] & 0x40 ? 1 : 0);
    disp[2] += (chars[getChar(str[c_pointer]) + c_p_pointer] & 0x20 ? 1 : 0);
    disp[3] += (chars[getChar(str[c_pointer]) + c_p_pointer] & 0x10 ? 1 : 0);
    disp[4] += (chars[getChar(str[c_pointer]) + c_p_pointer] & 0x08 ? 1 : 0);
    disp[5] += (chars[getChar(str[c_pointer]) + c_p_pointer] & 0x04 ? 1 : 0);
    disp[6] += (chars[getChar(str[c_pointer]) + c_p_pointer] & 0x02 ? 1 : 0);
    disp[7] += (chars[getChar(str[c_pointer]) + c_p_pointer] & 0x01 ? 1 : 0);
    c_p_pointer++;
  }

  //set led to display
  for (byte i = 0; i < 8; i++)
    lc.setRow(0, i, disp[i]);

  for (byte i = 0; i < 8; i++)
    disp[i] = disp[i] << 1;

  delay(delaytime);
}
